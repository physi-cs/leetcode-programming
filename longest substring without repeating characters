hashmap方法
#include<string>
#include<algorithm>
#include<map>
using namespace std;
class Solution {
public:
	int lengthOfLongestSubstring(string s) {
		int n = s.length();
		map<char,int> hashmap;
		int ans = 0;
		for (int i = 0, j = 0; j < n; j++) {
			if (hashmap.find(s[j]) != hashmap.end()) //查询是否已存在这里太慢了，可以优化
				i = max(hashmap[s[j]], i);//窗口左侧直接滑动到与s[j]重复的上一位置
			ans = max(ans, j - i + 1);
			hashmap[s[j]]=j+1;//若不重复，则窗口右侧位置的字符记录进hashmap
			}
		return ans;	
	}
};


暴力
#include<string>
#include<algorithm>
#include<set>
using namespace std;
class Solution {
public:
	int lengthOfLongestSubstring(string s) {
		int n = s.length;
		int ans = 0;
		for (int i = 0; i < n; i++)
			for (int j = 1; j <= n; j++)
				if (judge(s, i, j))
					ans = max(ans, j - i);
		return ans;
	}
public:
	bool judge(string s, int start, int end) {
		set<char> hash;
		for (int k = start; k <= end; k++) 
			if (hash.find(s[k]) == hash.end()) 
				hash.insert(s[k]);
			else 
				return false;
		return true;
	}
};
