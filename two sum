暴力解决
#include <vector>
using namespace std;
class Solution {
public:
	vector<int> twoSum(vector<int>& nums, int target) {
		vector<int> ans;
		for (auto i = 0; i<nums.size(); i++) 
			for (auto j = i+1; j < nums.size(); j++) 
				if (nums[i] + nums[j] == target) {
					ans.push_back(i);
					ans.push_back(j);
					break;
				}
		return ans;
	}	
};

hash方法

#include<vector>
#include<unordered_map>
using namespace std;
class Solution {
public:
	vector<int> twoSum(vector<int>& nums, int target) {
		unordered_map<int, vector<int>>hash;
		vector<int> ans;
		//hash的下标对应了nums的实际值，通过下标即实际值找到对应的元素在nums中的序号
		for (int i = 0; i < nums.size(); i++)
			hash[nums[i]].push_back(i);
		int flag = 0;
		for (int i = 0; i < nums.size(); i++) {
			int x = target - nums[i];
			if (hash.find(x) == hash.end())//find寻找的key是map的键值，返回键为key的迭代器
				continue;
			for (int j = 0; j < hash[x].size(); j++) {
				if (i != hash[x][j]) {
					flag = 1;
					ans.push_back(i);
					ans.push_back(hash[x][j]);
					break;
				}
			}
			if (flag == 1)
				break;
		}
		return ans;
	}
};
